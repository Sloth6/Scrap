$headerHeight:          25vh;

$cardPaddingTop:        $cell * 3;
$cardPaddingRight:      $cell * 1;
$cardPaddingBottom:     $cell * 1;
$cardPaddingLeft:       $cell * 3;
$cardPadding:           $cardPaddingTop/2 $cardPaddingRight/2 $cardPaddingBottom/2 $cardPaddingLeft/2;
$cardPaddingFat:        $cardPaddingTop $cardPaddingRight $cardPaddingBottom $cardPaddingLeft;

$articleSideNarrow:     $col * 3;
$articleSide:           $col * 4;
$articleSideWide:       $col * 5;
$articleWidthVideo:     $col * 24;
$articleMinHeight:      $articleSideNarrow;

$coverWidth:            $articleSide;
$coverHeight:           $col * 6;


$menuWidth:             $articleSideNarrow;
$menuItemHeight:        $leading;
$menuOffsetX:           $menuWidth * 1.5;

$cardHoverScaleMin: scale3d(1.015125, 1.015125, 1.015125);
$cardHoverScaleMax: scale3d(1.15,  1.15,  1.15);

$cardBorderWidth:           1px;
$cardBorderColor:           $colorType; // rgba(0,0,0,.125);
$cardBorderColorHover:      $colorType;
$cardBorder:                $cardBorderWidth solid $cardBorderColor;
$cardBoxShadowDimensions:   $cell $cell 0 0;
$cardBoxShadowColor:        rgba(0,0,0,1);
$cardBoxShadow:             $cardBoxShadowDimensions $cardBoxShadowColor;

$cardBorderRadius:          0; // $cell/4;


@mixin transformOriginCenter {
    -webkit-transform-origin: center center;
       -moz-transform-origin: center center;
        -ms-transform-origin: center center;
            transform-origin: center center;
}

@mixin cursorGrab {
    cursor: move;
    cursor: -webkit-grab;
    cursor: -moz-grab;
    cursor: grab;
}

@mixin cursorGrabbing {
    cursor: move;
    cursor: -webkit-grabbing;
    cursor: -moz-grabbing;
    cursor: grabbing;
}

@mixin cardStyle {
    background-color: $colorCardBackground;
    border: $cardBorder;
    padding: $cardPadding;
    border-radius: $cardBorderRadius;
            transform-origin: right bottom;
    -webkit-transform-origin: right bottom;
}

@mixin cardHover {
    @include transition(.25s $defaultCurve);
    @include transition-property(transform,
                         -webkit-transform,
                            -moz-transform,
                                 box-shadow,
                         -webkit-box-shadow,
                            -moz-box-shadow,
                                 background-color,
                                 border-color,
                                 color,
                                 mix-blend-mode,
                         -webkit-filter);
                                 
    &.hover {
        border-color: $cardBorderColorHover;
//         @include box-shadow($cardBoxShadowDimensions $cardBoxShadowColor);
//         @include transform(translate3d(-$cell, -$cell, 0));
//         @include transform($cardHoverScaleMin);
        &.invertHover {
//             @include box-shadow($cardBoxShadowDimensions white);
        }
    }
}

@mixin cardDraggable {
//     @include cursorGrab;
}

@mixin cardDragging {
    @include cardHover;
//     @include cursorGrabbing;
}

@mixin cardEditing {
    border-style: dashed !important;
    border-color: $colorType !important;
    background-color:  $colorCardBackground !important;
    
    &.hover {
        @include transform(none);
        @include box-shadow(none);

    }
}

@mixin coverBackground {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    opacity: 1;
    background-size: cover;
      mix-blend-mode: multiply;
    -webkit-filter: brightness(2) contrast(1) grayscale(1);
    // Disabled transition because of flickering bug in Chrome
    // 	@include transition(.25s $defaultCurve);
    // 	@include transition-property(opacity, -webkit-filter);
}

@mixin coverBackgroundDull {
    opacity: .125;
    // 	  mix-blend-mode: screen;
    -webkit-filter: brightness(1) contrast(1) grayscale(1) invert(1);
}

@mixin cardCover {
    position: relative;
    	width: $coverWidth;
    	height: $coverHeight;
    	cursor: pointer;
    	overflow: hidden;
}

@mixin button {
}

@mixin blackHover {
    background-color: $colorType !important;
    color: $colorCardBackground !important;
    border-color: $colorCardBackground;
    
    &.cardHover.hover {
        @include box-shadow($cardBoxShadowDimensions black);
    }
}

@mixin invertHover {
    -webkit-filter: invert(1);
}

/*
a, input[type=submit], input[type=button] {
    @include linkReset;
    @include transition(opacity .25s $defaultCurve);
    
    &:hover, &:focus {
        opacity: .5;
    }
    
    &:active {
        opacity: .25;
    }
    
    &.action {
        &:hover {
            @include hoverLinkAnimation;
            opacity: 1;
        }
    }
    
    &.warning {
        
        &:hover {
            @include hoverWarningAnimation;
            opacity: 1;
        }
    }

}
*/

.invertHover {
    &:hover {
        @include invertHover;
    }
}

.blackHover {
    &:hover {
        @include blackHover;
    }
}
    
.card {
    @include cardStyle;
    display: block;
}

.cardHover {
//     @include cardHover;
}

.cardDrag {
    @include cardDraggable;
}

.card.editing {
    @include cardEditing;
}

.cardActions {
    position: absolute;
    bottom: $cardPaddingBottom/2;
    left: $cardPaddingLeft/2;
    right: $cardPaddingLeft/2;
    @include typeBody;
    
    li.right {
        float: right;
    }
}

.newCard {
    border-style: dashed;
    
    &.hover, &:hover {
        border-style: solid;
        @include transform(none);
        @include box-shadow(none);
    }
}

.card.cover, .cover .card {
    @include cardCover;
}

// Globals

.invisible {
    opacity: 0;
    @include transition(opacity .25s $defaultCurve);
}

.backButton {
    &:hover {
        a span {
            @include transform(translate3d(-$cell/2, 0px, 0px));
        }
    }
    
    a {
        font-size: $typeHeaderSize * 2;
        font-weight: $fontWeightThin;
        display: block;
        
        span {
            display: inline-block;
            @include transform(translate3d(0px, 0px, 0px));
            @include transition(.25s $defaultCurve);
            @include transition-property(transform,
                                 -webkit-transform,
                                    -moz-transform);
        }
    }
}

// Forms

form {
    position: relative;
    
    li {
        list-style: none;
        margin-top: $leading;
    }
    
}

label {
    @include typeBodySmallCaps;
}

@mixin placeHolderOverride {
    color: $colorType;
}

::-webkit-input-placeholder {
    @include placeHolderOverride;
}

:-moz-placeholder {
    @include placeHolderOverride;
}
::-moz-placeholder { 
    @include placeHolderOverride;
}
:-ms-input-placeholder { 
    @include placeHolderOverride;
}

input {
    @include resetInput;
    @include typeBody;
    color: $colorType;
    border-bottom: $cardBorderWidth $colorType solid;
    max-width: 100%;
    border-radius: 0;
        
    &.offset {
        @include button;
    }
    
    &[type=submit], &[type=button] {
        border: 0;
        cursor: pointer;
        text-align: left;
    }
    
    &[type=checkbox] {
        width: 1em;
        margin-left: -1.5em;
        margin-right: .5em;
    }    
}

.slideIn {
  
    &.left {
        li, &.open li.hidden {
            @include transform(translate3d(-$menuOffsetX, 0.0, 0.0));
            
            &.first {
                @include transform(translate3d(0, 0, 0))
            }
                        
        }
        
        &.open {
            li {
                @include transform(translate3d(0, 0, 0))
            }
        }    
    }
    
    &.right {
        li, &.open li.hidden {
            @include transform(translate3d($menuOffsetX, 0.0, 0.0));
            
            &.first {
                @include transform(translate3d(0, 0, 0));
                
                a {
                    &:hover {
                        left: -$cell;
                    }
                }
            }
            
            input {
                text-align: left;
            }
            
        }
        
        &.open {
            li {
                @include transform(translate3d(0, 0, 0))
            }
        }
    }
    &.hideFirst {
        
        > li {

            &.first {
                position: absolute;
                top: $gutter;
            }
        }
        
        &.left {
            &.open {
                > li.first {
                    @include transform(translate3d(-$menuOffsetX, 0.0, 0.0));
                    opacity: 0;
                }
            }
        
            > li.first {
                left: $cardPaddingRight;
                @include transform(translate3d(-$menuOffsetX, 0.0, 0.0));
            }
        }
        
        &.right {            
            &.open {
                > li.first {
                    @include transform(translate3d($menuOffsetX * 2, -$col, 0.0) rotate(0));
                    opacity: 0;
                }
            }
        
            > li.first {
                        transform-origin: $menuOffsetX top;
                -webkit-transform-origin: $menuOffsetX top;
                @include transform(translate3d(-$menuOffsetX, $col/2, 0.0) rotate(-11deg));
                right: 0;
            }
        }
    }
}

ul.headerMenu {
    overflow: visible;
    position: absolute;
    display: inline-block;
    white-label: nowrap;
    border: $cardBorder;
    border-color: transparent;
    background: $colorCardBackground;
    top: -$cardBorderWidth;
    width: $menuWidth;
    @include typeBody;
    @include transition(1s $defaultCurve);
    @include transition-property(left, right, background, border, width, padding, transform, -webkit-transform, -moz-transform);
        
    &.left {
        float: left;
                transform-origin: right top;
        -webkit-transform-origin: right top;
        left: 0;
        @include transform(translate3d(-$menuOffsetX, -$col, 0.0) rotateZ(-11deg));
    }
    
    &.right {
                transform-origin: left top;
        -webkit-transform-origin: left top;
        right: 0;
        @include transform(translate3d($menuOffsetX, -$col, 0.0) rotateZ(11deg));
    }
    
    &.hidden {
        
        &.left {
            @include transform(translate3d(-$menuOffsetX, 0.0, 0.0) rotateZ(0));
        }
        
        &.right {
            @include transform(translate3d($menuOffsetX, 0.0, 0.0) rotateZ(0));
        }
    }
    
    &.open {
        border-color: $cardBorderColor;
        padding: $cardPadding;
        @include transform(translate3d(0.0, 0.0, 0.0) scale3d(1.0, 1.0, 1.0));
        
        &.paddingBottom{
            padding-bottom: $broadMargin;
        }
        
        li {
            height: $menuItemHeight;
            margin-bottom: $cell;
            @include transform(scaleY(1));
            
            a, form {
                position: relative;
            }
        }
    }
    
    li {
        height: 0;
        margin-bottom: 0;
                transform-origin: center center;
        -webkit-transform-origin: center center;
        @include transform(scaleY(0));
    }
}

ul.menu {
    
    section { 
        padding-bottom: $leading;
    }
    
    li {
        position: relative;
        @include transition(1s $defaultCurve);
        @include transition-property(left, right, height, opacity, margin-bottom,
                                     transform,
                             -webkit-transform,
                                -moz-transform);
                                
        &.backButton {
            padding-bottom: $typeBodyLeading;
            
            a {
                &:hover, &:active, &:focus {
                    left: 0;
                }
            }
        }
                                
        &.input {
            margin-top: $cell * 3;
        }
                                        
        &.heading {
            @include typeBodySmallCaps;
        }
        
        &.hidden {
            height: 0;
            margin: 0;
            opacity: 0;
            padding: 0;
        }
          
        &.first {
            opacity: 1;
            height: $menuItemHeight;
            cursor: pointer;
            margin-top: $cell/2;
            white-space: nowrap;
        }
        
        input {
            width: 100%;
            @include transition(.5s $defaultCurve);
            @include transition-property(width);
        }
        
        a {
            position: relative;
            left: 0;
            @include transition(.25s $defaultCurve);
                            
            &:hover, &:active, &:focus {
                left: $cell;
            }
        }
        
        > a {
            display: block;
            width: 100%;
            position: relative;
            @include transition-property(left, right, transform,
                                              -webkit-transform,
                                                 -moz-transform);
        }
/*
        
        &:nth-of-type(2)  { @include transition-delay(.19s); }
        &:nth-of-type(3)  { @include transition-delay(.18s); }
        &:nth-of-type(4)  { @include transition-delay(.17s); }
        &:nth-of-type(5)  { @include transition-delay(.16s); }
        &:nth-of-type(6)  { @include transition-delay(.15s); }
        &:nth-of-type(7)  { @include transition-delay(.14s); }
        &:nth-of-type(8)  { @include transition-delay(.13s); }
        &:nth-of-type(9)  { @include transition-delay(.12s); }
        &:nth-of-type(10) { @include transition-delay(.11s); }
        &:nth-of-type(11) { @include transition-delay(.10s); }
        &:nth-of-type(12) { @include transition-delay(.9s); }
        &:nth-of-type(13) { @include transition-delay(.8s); }
        &:nth-of-type(14) { @include transition-delay(.7s); }
        &:nth-of-type(15) { @include transition-delay(.6s); }
        &:nth-of-type(16) { @include transition-delay(.5s); }
        &:nth-of-type(17) { @include transition-delay(.4s); }
        &:nth-of-type(18) { @include transition-delay(.3s); }
        &:nth-of-type(19) { @include transition-delay(.2s); }
        &:nth-of-type(20) { @include transition-delay(.1s); }
*/
        
/*
        &:nth-of-type(2)  { @include transition-delay(.1s); }
        &:nth-of-type(3)  { @include transition-delay(.2s); }
        &:nth-of-type(4)  { @include transition-delay(.3s); }
        &:nth-of-type(5)  { @include transition-delay(.4s); }
        &:nth-of-type(6)  { @include transition-delay(.5s); }
        &:nth-of-type(7)  { @include transition-delay(.6s); }
        &:nth-of-type(8)  { @include transition-delay(.7s); }
        &:nth-of-type(9)  { @include transition-delay(.8s); }
        &:nth-of-type(10) { @include transition-delay(.9s); }
        &:nth-of-type(11) { @include transition-delay(.10s); }
        &:nth-of-type(12) { @include transition-delay(.11s); }
        &:nth-of-type(13) { @include transition-delay(.12s); }
        &:nth-of-type(14) { @include transition-delay(.13s); }
        &:nth-of-type(15) { @include transition-delay(.14s); }
        &:nth-of-type(16) { @include transition-delay(.15s); }
        &:nth-of-type(17) { @include transition-delay(.16s); }
        &:nth-of-type(18) { @include transition-delay(.17s); }
        &:nth-of-type(19) { @include transition-delay(.18s); }
        &:nth-of-type(20) { @include transition-delay(.19s); }
*/

        &:nth-of-type(1)  { @include transition-delay(.05s); }
        &:nth-of-type(2)  { @include transition-delay(.1s); }
        &:nth-of-type(3)  { @include transition-delay(.15s); }
        &:nth-of-type(4)  { @include transition-delay(.2s); }
        &:nth-of-type(5)  { @include transition-delay(.25s); }
        &:nth-of-type(6)  { @include transition-delay(.3s); }
        &:nth-of-type(7)  { @include transition-delay(.35s); }
        &:nth-of-type(8)  { @include transition-delay(.4s); }
        &:nth-of-type(9)  { @include transition-delay(.45s); }
        &:nth-of-type(10) { @include transition-delay(.5s); }
        &:nth-of-type(11) { @include transition-delay(.55s); }
        &:nth-of-type(12) { @include transition-delay(.6s); }
        &:nth-of-type(13) { @include transition-delay(.65s); }
        &:nth-of-type(14) { @include transition-delay(.7s); }
        &:nth-of-type(15) { @include transition-delay(.75s); }
        &:nth-of-type(16) { @include transition-delay(.8s); }
        &:nth-of-type(17) { @include transition-delay(.85s); }
        &:nth-of-type(18) { @include transition-delay(.9s); }
        &:nth-of-type(19) { @include transition-delay(.95s); }
        &:nth-of-type(20) { @include transition-delay(1.0s); }

/*
        &:nth-of-type(1)  { @include transition-delay(.0s); }
        &:nth-of-type(2)  { @include transition-delay(.025s); }
        &:nth-of-type(3)  { @include transition-delay(.05s); }
        &:nth-of-type(4)  { @include transition-delay(.075s); }
        &:nth-of-type(5)  { @include transition-delay(.1s); }
        &:nth-of-type(6)  { @include transition-delay(.125s); }
        &:nth-of-type(7)  { @include transition-delay(.15s); }
        &:nth-of-type(8)  { @include transition-delay(.175s); }
        &:nth-of-type(9)  { @include transition-delay(.2s); }
        &:nth-of-type(10) { @include transition-delay(.225s); }
        &:nth-of-type(11) { @include transition-delay(.25s); }
        &:nth-of-type(12) { @include transition-delay(.275s); }
        &:nth-of-type(13) { @include transition-delay(.3s); }
        &:nth-of-type(14) { @include transition-delay(.325s); }
        &:nth-of-type(15) { @include transition-delay(.35s); }
        &:nth-of-type(16) { @include transition-delay(.375s); }
        &:nth-of-type(17) { @include transition-delay(.4s); }
        &:nth-of-type(18) { @include transition-delay(.425s); }
        &:nth-of-type(19) { @include transition-delay(.45s); }
        &:nth-of-type(20) { @include transition-delay(.475s); }
*/


/*
        &:nth-of-type(2)  { @include transition-duration(.1s); }
        &:nth-of-type(3)  { @include transition-duration(.2s); }
        &:nth-of-type(4)  { @include transition-duration(.3s); }
        &:nth-of-type(5)  { @include transition-duration(.4s); }
        &:nth-of-type(6)  { @include transition-duration(.5s); }
        &:nth-of-type(7)  { @include transition-duration(.6s); }
        &:nth-of-type(8)  { @include transition-duration(.7s); }
        &:nth-of-type(9)  { @include transition-duration(.8s); }
        &:nth-of-type(10) { @include transition-duration(.9s); }
        &:nth-of-type(11) { @include transition-duration(1.0s); }
        &:nth-of-type(12) { @include transition-duration(1.1s); }
        &:nth-of-type(13) { @include transition-duration(1.2s); }
        &:nth-of-type(14) { @include transition-duration(1.3s); }
        &:nth-of-type(15) { @include transition-duration(1.4s); }
        &:nth-of-type(16) { @include transition-duration(1.5s); }
        &:nth-of-type(17) { @include transition-duration(1.6s); }
        &:nth-of-type(18) { @include transition-duration(1.7s); }
        &:nth-of-type(19) { @include transition-duration(1.8s); }
        &:nth-of-type(20) { @include transition-duration(1.9s); }
*/
    }
}

.mask {
    height: 100vh;
    width: 100vw;
    position: absolute;
    top: 0;
    left: 0;
    background: transparent;
}


textarea {
  @include resetInput;
  @include typeBody;   
  width: 100%;
  height: $baseline;
}