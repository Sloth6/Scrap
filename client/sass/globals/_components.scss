$menuWidth: 40vw;
$articleWidth: $col * 4;

$cardHoverScaleMin: scale3d(1.125, 1.125, 1.125);
$cardHoverScaleMax: scale3d(1.15,  1.15,  1.15);

$cardBorderWidth:           2.5pt;
$cardBorder:                $cardBorderWidth solid $colorType;
$cardBoxShadowDimensions:   $gutter $gutter 0 0;
$cardBoxShadowColor:        $colorType;
$cardBoxShadow:             $cardBoxShadowDimensions $cardBoxShadowColor;

@mixin cardStyle {
    background-color: $colorCardBackground;
    border: $cardBorder;
    padding: $cardPadding;
            transform-origin: bottom right;
    -webkit-transform-origin: bottom right;
}

@mixin cardHover {
    @include box-shadow($cardBoxShadowDimensions $cardBoxShadowColor);
    border-color: $colorAccent !important;
    color: $colorAccent;
    @include transform(translate(-$gutter, -$gutter) $cardHoverScaleMin);
    * { 
        border-color: $colorAccent;
    }
}

@mixin cardDrag {
    cursor: move;
    @include transform(translate(-$gutter, -$gutter) $cardHoverScaleMin rotate(1.5deg));
    @include box-shadow($cardBoxShadowDimensions $cardBoxShadowColor);
}

@mixin button {
}

@mixin buttonOffset {
    // position: relative;
    // margin-left: -$gutter*1.5;
    // margin-top: -.666em;
    // left: 100%;
    // float: left;
}

a {
    &:hover, &:active, &:focus {
        @include hoverAnimation;
    }
}

.card {
    
    &.form {
        padding-left: $gutter * 2 !important;
    }
}

form {
    position: relative;
}

label {
    @include typeBody;
}

@mixin placeHolderOverride {
    color: $colorType;
    opacity: .25;
    text-transform: none;
    
    &:hover {
        @include hoverAnimation;
    }
}

::-webkit-input-placeholder {
    @include placeHolderOverride;
}

:-moz-placeholder {
    @include placeHolderOverride;
}
::-moz-placeholder { 
    @include placeHolderOverride;
}
:-ms-input-placeholder { 
    @include placeHolderOverride;
}


input {
    @include resetInput;
    @include typeBody;
    color: $colorType;
    border-bottom: .125em $colorType solid;
        
    &:focus, &:hover {
        @include hoverAnimation;
    }
    
    &.offset {
        @include button;
        @include buttonOffset;
    }
    
    &[type=submit], &[type=button] {
        border: 0;
        cursor: pointer;
    }
    
    &[type=checkbox] {
        width: 1em;
        margin-left: -1.5em;
        margin-right: .5em;
    }
    
    &[type=email] {
        text-transform: lowercase;
    }
    
}

ul.menu {
    height: $baseline * 2;
    position: absolute;
    display: inline-block;
    width: $menuWidth/2;
    white-space: nowrap;
    @include transition(1s $defaultCurve);
    @include transition-property(left, right);
    
    &.open {
        @include transition(2s $defaultCurve);
        width: $menuWidth;
        
        li {
            
            a, form {
                position: relative;
            }
        }
    }
    
    &.hideFirst {
        
        &.right {
            &.open {
                > li.first {
                    right: -50vw;
                }
            }
        
            > li.first {
                right: 0;
            }
        }
        
        &.left {
            &.open {
                > li.first {
                    left: -50vw;
                }
            }

            > li.first {
                left: 0;
            }
        }
        
        > li.first {
            position: absolute;
            @include transition(1s $defaultCurve);
            @include transition-property(right);
        }
    }
    
    &.left {
        float: left;
        left: $gutter;
        
        li, &.open li.hidden {
//             left: -50vw;
            @include transform(translate3d(-500.0px, 0.0, 0.0));
            
            &.first {
//                 left: 0;
                @include transform(translate3d(0, 0, 0))
            }
                        
            a {
                position: relative;
                left: 0;
/*
                display: inline-block;
                @include transform(translate3d(0.0, 0.0, 0.0));
*/
                @include transition(.25s $defaultCurve);
                                
                &:hover, &:active, &:focus {
                    left: $gutter;
//                     @include transform(translate3d(25.0, 0.0, 0.0));
                }
            }
        }
        
        &.open {
            li {
//                 left: 0;
                @include transform(translate3d(0, 0, 0))
            }
        }    
    }
    
    &.right {
        float: right;
        text-align: right;
        right: $gutter;
        
        li, &.open li.hidden {
//             right: -50vw;
//             right: 0;
            @include transform(translate3d(500.0px, 0.0, 0.0));
            
            &.first {
//                 right: 0;
                @include transform(translate3d(0, 0, 0))
            }
            
            form, input {
                text-align: right;
            }
            
            a {
                position: relative;
                right: 0;
/*
                display: inline-block;
                @include transform(translate3d(0.0, 0.0, 0.0));
*/
                @include transition(.25s $defaultCurve);
                
                &:hover, &:active, &:focus {
                    right: $gutter;
//                     @include transform(translate3d(-25.0, 0.0, 0.0));
                }
            }
        }
        
        &.open {
            li {
//                 right: 0;
                @include transform(translate3d(0, 0, 0))
            }
        }
    }
    
    &.hidden {
        
        &.left {
            left: -$menuWidth * 1.5;
        }
        
        &.right {
            right: -$menuWidth * 1.5;
        }
    }
    
    li {
        position: relative;
        height: $leading;
        @include transition(.5s $defaultCurve);
        @include transition-property(left, right, height, opacity, margin,
                                     transform,
                             -webkit-transform,
                                -moz-transform);
        &.heading {
            @include typeBody;
            text-transform: lowercase;
            padding-top: $leading;
        }
        
        &.inputText {
            margin: $leading/2 0;
        }
        
        &.hidden {
            height: 0;
            margin: 0;
        }
        
        form {
            white-space: nowrap;
        }
        
        > a {
            display: block;
            width: 100%;
            position: relative;
            @include transition-property(left, right, transform,
                                              -webkit-transform,
                                                 -moz-transform);
        }
/*
        
        &:nth-of-type(2)  { @include transition-delay(.19s); }
        &:nth-of-type(3)  { @include transition-delay(.18s); }
        &:nth-of-type(4)  { @include transition-delay(.17s); }
        &:nth-of-type(5)  { @include transition-delay(.16s); }
        &:nth-of-type(6)  { @include transition-delay(.15s); }
        &:nth-of-type(7)  { @include transition-delay(.14s); }
        &:nth-of-type(8)  { @include transition-delay(.13s); }
        &:nth-of-type(9)  { @include transition-delay(.12s); }
        &:nth-of-type(10) { @include transition-delay(.11s); }
        &:nth-of-type(11) { @include transition-delay(.10s); }
        &:nth-of-type(12) { @include transition-delay(.9s); }
        &:nth-of-type(13) { @include transition-delay(.8s); }
        &:nth-of-type(14) { @include transition-delay(.7s); }
        &:nth-of-type(15) { @include transition-delay(.6s); }
        &:nth-of-type(16) { @include transition-delay(.5s); }
        &:nth-of-type(17) { @include transition-delay(.4s); }
        &:nth-of-type(18) { @include transition-delay(.3s); }
        &:nth-of-type(19) { @include transition-delay(.2s); }
        &:nth-of-type(20) { @include transition-delay(.1s); }
*/
        
        &:nth-of-type(2)  { @include transition-delay(.1s); }
        &:nth-of-type(3)  { @include transition-delay(.2s); }
        &:nth-of-type(4)  { @include transition-delay(.3s); }
        &:nth-of-type(5)  { @include transition-delay(.4s); }
        &:nth-of-type(6)  { @include transition-delay(.5s); }
        &:nth-of-type(7)  { @include transition-delay(.6s); }
        &:nth-of-type(8)  { @include transition-delay(.7s); }
        &:nth-of-type(9)  { @include transition-delay(.8s); }
        &:nth-of-type(10) { @include transition-delay(.9s); }
        &:nth-of-type(11) { @include transition-delay(.10s); }
        &:nth-of-type(12) { @include transition-delay(.11s); }
        &:nth-of-type(13) { @include transition-delay(.12s); }
        &:nth-of-type(14) { @include transition-delay(.13s); }
        &:nth-of-type(15) { @include transition-delay(.14s); }
        &:nth-of-type(16) { @include transition-delay(.15s); }
        &:nth-of-type(17) { @include transition-delay(.16s); }
        &:nth-of-type(18) { @include transition-delay(.17s); }
        &:nth-of-type(19) { @include transition-delay(.18s); }
        &:nth-of-type(20) { @include transition-delay(.19s); }
    }
}

.mask {
    height: 100vh;
    width: 100vw;
    position: absolute;
    top: 0;
    left: 0;
    background: transparent;
    z-index: 10;
}

.floatingMenu {
    
    ul {
        
        li {
            @include transition(.5s $defaultCurve);
            @include transition-property(width, height, font-weight, font-size, border-color, padding);
            @include typeBody;
            @include cardStyle;
            background-color: $colorCardBackground;
            padding: $cardPadding;
            height: $leading;
            margin-top: -$cardBorderWidth;
            cursor: pointer;
            
            .label {
                display: absolute;
            }
            
            input {
                cursor: auto;
            }
            
/*
            &:last-of-type {
                border-bottom: $cardBorder;
            }
*/
            
            &.closed {
                width: $col;
                                     
                &.hidden {
//                     width: 0;
                    height: 0;
                    border-color: transparent;;
                    padding: 0;
                }
           
                input, textarea {
                    display: none;
                    opacity: 0;
                    @include transition(.5s $defaultCurve);
                    @include transition-property(opacity);
                }
            }
            
            &.open {
                width: $articleWidth;
                @include typeHeader;                
                
                &.tall {
                    height: $leading * 4;
                }
                
                input {
                    opacity: 1;
                }
            }
            
            &.open, &.hidden {
                .label {
                    opacity: 0;
                    left: -$col;
                    @include transition(.5s $defaultCurve);
                    @include transition-property(left, opacity);
                }
            }
        }
    }
}

textarea {
  @include resetInput;
  @include typeBody;   
  width: 100%;
  height: $baseline;
}
